{"version":3,"sources":["webpack:///./js/Fail.js","webpack:///./js/CreateGameBoard.js","webpack:///./js/script.js","webpack:///./js/DetermineDirection.js"],"names":["setScore","score","recorde","score_recorde","document","querySelector","current_score","localStorage","getItem","innerHTML","setItem","gameboard","buttonupp","buttonleft","buttonright","buttonbottom","container","bordersize","ModifierEnum","Object","freeze","UPP","BOTTON","LEFT","RIGHT","appleX","appleY","modifier","board","i","j","createElement","classList","add","append","snake","obstacle","addEventListener","interval","setInterval","length","isLive","clearInterval","newgamebutton","innerText","window","location","reload","createNeGemeButton","firstbodyitemX","firstbodyitemY","snake0","snake1","temporarilySnake","contains","remove","createNewApple","push","calculateSnakePosition","renderGameObject","appleinterval","Math","floor","random"],"mappings":"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","file":"bundle.js","sourcesContent":["const Fail = (interval,container,gameboard) => {\r\n    clearInterval(interval);   \r\n    gameboard.classList.add(`fail`);\r\n    container.append(createNeGemeButton());  \r\n}\r\n\r\nfunction createNeGemeButton(){\r\n    const newgamebutton = document.createElement(`div`);\r\n    newgamebutton.classList.add(`newgamebutton`);\r\n    newgamebutton.innerText = `Новая игра`;\r\n    newgamebutton.addEventListener(`click`, ()=>{\r\n        window.location.reload();\r\n    });\r\n    return newgamebutton;\r\n}\r\n\r\n\r\nexport default Fail;","const CreateGameBoard = (gameboard, bordersize) => {\r\n    let board = [];\r\n    for(let i = 0 ; i < bordersize; i++) {\r\n        board[i] = [];\r\n        for (let j = 0; j < bordersize; j++){\r\n            board[i][j] = document.createElement(`div`);\r\n            board[i][j].classList.add(`box`);\r\n            gameboard.append(board[i][j]);\r\n        }   \r\n    }\r\n    return board;\r\n}\r\n\r\nexport const setScore = (score = 0) => {\r\n    let score_recorde = document.querySelector(`.score_recorde`),\r\n        current_score = document.querySelector(`.current_score`),\r\n        recorde;\r\n    if(localStorage.getItem(`recorde`)){\r\n        recorde =  localStorage.getItem(`recorde`);\r\n    } else {recorde = 0;}\r\n    if ( score == 0 ) { score_recorde.innerHTML = `Рекорд ${recorde}`; }  \r\n    current_score.innerHTML = `Очки ${score}`;\r\n    if(score > recorde){\r\n        localStorage.setItem(`recorde`,score);\r\n    }\r\n}\r\n\r\nexport default CreateGameBoard;\r\n","import Fail from \"./Fail\";\r\nimport DetermineDirection from \"./DetermineDirection\";\r\nimport CreateGameBoard, { setScore } from \"./CreateGameBoard\";\r\n\r\nconst gameboard = document.querySelector(`.gameboard`),\r\n      buttonupp = document.querySelector(`.buttonupp`),\r\n      buttonleft = document.querySelector(`.buttonleft`),\r\n      buttonright = document.querySelector(`.buttonright`),\r\n      buttonbottom = document.querySelector(`.buttonbottom`),\r\n      container = document.querySelector(`.container`),\r\n      bordersize = 31,\r\n      ModifierEnum = Object.freeze({\r\n        UPP: `upp`,\r\n        BOTTON: `bottom`,\r\n        LEFT: `left`,\r\n        RIGHT: `right`\r\n     });\r\nlet appleX, appleY;\r\nlet modifier = ModifierEnum.LEFT;\r\nlet board = CreateGameBoard(gameboard, bordersize);\r\nlet snake = [[21, 21], [21, 22]];\r\nlet score = 0;\r\nlet obstacle = [];\r\nobstacle[0] = [];\r\n\r\nsetScore();\r\nselectModifier();\r\nconst interval = setInterval(gameStep, 300),\r\n      appleinterval = setInterval(createNewApple, 4000);\r\n\r\nfunction gameStep() {\r\n    if( isLive() ) {\r\n        calculateSnakePosition();     \r\n        renderGameObject();\r\n    } else { Fail(interval, container, gameboard); }         \r\n}\r\n\r\nfunction isLive() {\r\n    if( snake[0][0] <= 0 || snake[0][0] >= bordersize || snake[0][1] <= 0 || snake[0][1] >= bordersize ) {  \r\n        return false;\r\n    } \r\n    for( let i = 1; i < snake.length; i++ ) {       \r\n        if( snake[0][0] == snake[i][0] && snake[0][1] == snake[i][1] ) {            \r\n            return false;\r\n        }\r\n    }\r\n    for( let i = 1; i < obstacle.length ; i++ ) {       \r\n        if( snake[0][0] == obstacle[i][0] && snake[0][1] == obstacle[i][1] ) {\r\n            return false;\r\n        }\r\n    }  \r\n    return true;\r\n}\r\n   \r\nfunction calculateSnakePosition() {\r\n    let firstbodyitemX = snake[0][0],\r\n        firstbodyitemY = snake[0][1];\r\n    \r\n    snake[0] = DetermineDirection( modifier, snake[0][0], snake[0][1] );\r\n    let temporarilySnake = [];\r\n    temporarilySnake[0] = [snake[0][0], snake[0][1]];\r\n    for( let i = 1; i < snake.length; i++ ) {\r\n        temporarilySnake[i] = [];\r\n        if( i == 1 ) {\r\n            temporarilySnake[1][0] = firstbodyitemX;\r\n            temporarilySnake[1][1] = firstbodyitemY;\r\n        } else {\r\n            temporarilySnake[i][0] = snake[i-1][0];\r\n            temporarilySnake[i][1] = snake[i-1][1];\r\n        }\r\n    }\r\n    if( checkEatingApple() ) {\r\n        temporarilySnake[temporarilySnake.length] = [];       \r\n        temporarilySnake[temporarilySnake.length-1][0] = snake[snake.length-1][0];\r\n        temporarilySnake[temporarilySnake.length-1][1] = snake[snake.length-1][1];\r\n        obstacle.push( snake[snake.length-1] );\r\n   }\r\n\r\n    for( let i = 0; i < temporarilySnake.length; i++ ) {\r\n        snake[i] = [];\r\n        snake[i][0] = temporarilySnake[i][0];\r\n        snake[i][1] = temporarilySnake[i][1];\r\n    }\r\n}\r\n \r\nfunction renderGameObject() {\r\n    for( let i = 0 ; i < bordersize; i++ ) {\r\n        for  (let j = 0; j < bordersize; j++ ) {\r\n            board[i][j].classList.remove(`snake_head`);\r\n            board[i][j].classList.remove(`snake_body`);\r\n        }   \r\n    }   \r\n\r\n    for( let i = 0; i < (snake.length); i++ ) {\r\n        if( i == 0 ) {\r\n            board[ (snake[0][0]) ][ (snake[0][1]) ].classList.add(`snake_head`);\r\n        } else {\r\n        board[ (snake[i][0]) ][ (snake[i][1]) ].classList.add(`snake_body`);\r\n        }\r\n    }\r\n\r\n    for( let i =1; i < obstacle.length; i++ ) {\r\n        board[ (obstacle[i][0]) ][ (obstacle[i][1]) ].classList.add(`obstacle`);\r\n    }\r\n}\r\n\r\nfunction createNewApple() {\r\n    appleX = Math.floor( Math.random() * bordersize );\r\n    appleY = Math.floor( Math.random() * bordersize );\r\n    for( let i = 0;  i < snake.length; i++ ) {\r\n        if( snake[i][0] == appleX && snake[i][1] == appleY ) {\r\n            createNewApple();\r\n            return; \r\n        }\r\n    }\r\n    for( let i = 1;  i < obstacle.length; i++ ) {\r\n        if( obstacle[i][0] == appleX && obstacle[i][1] == appleY ) {\r\n            createNewApple();\r\n            return; \r\n        }\r\n    }\r\n    board[appleX][appleY].classList.add(`apple`);\r\n    clearInterval(appleinterval);\r\n}\r\n\r\nfunction checkEatingApple(){\r\n    if( (board[snake[0][0]] [snake[0][1]]).classList.contains(`apple`) ) {\r\n        ( board[appleX][appleY] ).classList.remove(`apple`);\r\n        createNewApple();\r\n        score++;\r\n        setScore(score);\r\n        return true;\r\n    } else { return false };\r\n}\r\n\r\nfunction selectModifier() {   \r\n    buttonupp.addEventListener(`click`, () =>{\r\n        if( snake[0][1] != snake[1][1] ) {\r\n            modifier = ModifierEnum.UPP;     \r\n        }          \r\n    });\r\n    buttonleft.addEventListener(`click`, () =>{\r\n        if( snake[0][0] != snake[1][0] ) {\r\n            modifier = ModifierEnum.LEFT;     \r\n        }           \r\n    });\r\n    buttonright.addEventListener(`click`, () =>{\r\n        if( snake[0][0] != snake[1][0] ) {\r\n            modifier = ModifierEnum.RIGHT;     \r\n        }        \r\n    });\r\n    buttonbottom.addEventListener(`click` ,() =>{\r\n        if( snake[0][1] != snake[1][1] ) {\r\n            modifier = ModifierEnum.BOTTON;     \r\n        }           \r\n    });\r\n}\r\n\r\n","const DetermineDirection = ( modifier, snake0, snake1 ) => {\r\n    const UPP = `upp`,\r\n          BOTTON = `bottom`,\r\n          LEFT = `left`,\r\n          RIGHT = `right`;\r\n    \r\n    switch(modifier){\r\n        case UPP:\r\n            snake0 -= 1;\r\n            return [snake0,snake1];\r\n        case BOTTON:\r\n            snake0 += 1;\r\n            return [snake0,snake1];\r\n        case LEFT:\r\n            snake1 -= 1;\r\n            return [snake0,snake1];\r\n        case RIGHT:\r\n            snake1 += 1;\r\n            return [snake0,snake1];          \r\n    }      \r\n}\r\n\r\nexport default DetermineDirection;"],"sourceRoot":""}